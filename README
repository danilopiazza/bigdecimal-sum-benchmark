# JMH version: 1.37
# VM version: JDK 21.0.1, OpenJDK 64-Bit Server VM, 21.0.1+12-Ubuntu-222.04
# VM invoker: /usr/lib/jvm/java-21-openjdk-amd64/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumBigDecimalFromDouble

# Run progress: 0,00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 154,399 ns/op
# Warmup Iteration   2: 127,028 ns/op
# Warmup Iteration   3: 121,477 ns/op
# Warmup Iteration   4: 119,621 ns/op
# Warmup Iteration   5: 120,866 ns/op
Iteration   1: 127,039 ns/op
Iteration   2: 120,938 ns/op
Iteration   3: 122,056 ns/op
Iteration   4: 122,268 ns/op
Iteration   5: 130,435 ns/op

# Run progress: 4,00% complete, ETA 00:04:07
# Fork: 2 of 5
# Warmup Iteration   1: 160,659 ns/op
# Warmup Iteration   2: 137,566 ns/op
# Warmup Iteration   3: 144,726 ns/op
# Warmup Iteration   4: 129,039 ns/op
# Warmup Iteration   5: 129,963 ns/op
Iteration   1: 126,815 ns/op
Iteration   2: 125,231 ns/op
Iteration   3: 128,994 ns/op
Iteration   4: 129,634 ns/op
Iteration   5: 130,058 ns/op

# Run progress: 8,00% complete, ETA 00:03:56
# Fork: 3 of 5
# Warmup Iteration   1: 171,745 ns/op
# Warmup Iteration   2: 134,651 ns/op
# Warmup Iteration   3: 131,513 ns/op
# Warmup Iteration   4: 136,824 ns/op
# Warmup Iteration   5: 139,645 ns/op
Iteration   1: 135,319 ns/op
Iteration   2: 131,644 ns/op
Iteration   3: 129,471 ns/op
Iteration   4: 129,835 ns/op
Iteration   5: 129,124 ns/op

# Run progress: 12,00% complete, ETA 00:03:46
# Fork: 4 of 5
# Warmup Iteration   1: 180,764 ns/op
# Warmup Iteration   2: 132,637 ns/op
# Warmup Iteration   3: 132,547 ns/op
# Warmup Iteration   4: 130,767 ns/op
# Warmup Iteration   5: 140,544 ns/op
Iteration   1: 139,235 ns/op
Iteration   2: 132,840 ns/op
Iteration   3: 130,282 ns/op
Iteration   4: 132,460 ns/op
Iteration   5: 130,662 ns/op

# Run progress: 16,00% complete, ETA 00:03:35
# Fork: 5 of 5
# Warmup Iteration   1: 169,097 ns/op
# Warmup Iteration   2: 135,429 ns/op
# Warmup Iteration   3: 132,325 ns/op
# Warmup Iteration   4: 132,232 ns/op
# Warmup Iteration   5: 135,459 ns/op
Iteration   1: 133,401 ns/op
Iteration   2: 131,715 ns/op
Iteration   3: 130,898 ns/op
Iteration   4: 131,062 ns/op
Iteration   5: 135,235 ns/op


Result "io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumBigDecimalFromDouble":
  129,866 ±(99.9%) 3,146 ns/op [Average]
  (min, avg, max) = (120,938, 129,866, 139,235), stdev = 4,200
  CI (99.9%): [126,720, 133,012] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.1, OpenJDK 64-Bit Server VM, 21.0.1+12-Ubuntu-222.04
# VM invoker: /usr/lib/jvm/java-21-openjdk-amd64/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumBigDecimalFromLong

# Run progress: 20,00% complete, ETA 00:03:25
# Fork: 1 of 5
# Warmup Iteration   1: 6,390 ns/op
# Warmup Iteration   2: 4,725 ns/op
# Warmup Iteration   3: 4,697 ns/op
# Warmup Iteration   4: 4,647 ns/op
# Warmup Iteration   5: 4,745 ns/op
Iteration   1: 4,650 ns/op
Iteration   2: 4,678 ns/op
Iteration   3: 4,647 ns/op
Iteration   4: 4,667 ns/op
Iteration   5: 4,742 ns/op

# Run progress: 24,00% complete, ETA 00:03:15
# Fork: 2 of 5
# Warmup Iteration   1: 6,468 ns/op
# Warmup Iteration   2: 4,697 ns/op
# Warmup Iteration   3: 4,655 ns/op
# Warmup Iteration   4: 4,697 ns/op
# Warmup Iteration   5: 4,744 ns/op
Iteration   1: 4,635 ns/op
Iteration   2: 4,653 ns/op
Iteration   3: 4,619 ns/op
Iteration   4: 4,638 ns/op
Iteration   5: 4,689 ns/op

# Run progress: 28,00% complete, ETA 00:03:04
# Fork: 3 of 5
# Warmup Iteration   1: 6,367 ns/op
# Warmup Iteration   2: 4,691 ns/op
# Warmup Iteration   3: 4,657 ns/op
# Warmup Iteration   4: 4,627 ns/op
# Warmup Iteration   5: 4,700 ns/op
Iteration   1: 4,608 ns/op
Iteration   2: 4,629 ns/op
Iteration   3: 4,605 ns/op
Iteration   4: 4,638 ns/op
Iteration   5: 4,696 ns/op

# Run progress: 32,00% complete, ETA 00:02:54
# Fork: 4 of 5
# Warmup Iteration   1: 6,233 ns/op
# Warmup Iteration   2: 4,695 ns/op
# Warmup Iteration   3: 4,625 ns/op
# Warmup Iteration   4: 4,667 ns/op
# Warmup Iteration   5: 4,637 ns/op
Iteration   1: 4,604 ns/op
Iteration   2: 4,641 ns/op
Iteration   3: 4,601 ns/op
Iteration   4: 4,681 ns/op
Iteration   5: 4,626 ns/op

# Run progress: 36,00% complete, ETA 00:02:44
# Fork: 5 of 5
# Warmup Iteration   1: 6,257 ns/op
# Warmup Iteration   2: 4,710 ns/op
# Warmup Iteration   3: 4,630 ns/op
# Warmup Iteration   4: 4,761 ns/op
# Warmup Iteration   5: 4,621 ns/op
Iteration   1: 4,608 ns/op
Iteration   2: 4,617 ns/op
Iteration   3: 4,602 ns/op
Iteration   4: 4,686 ns/op
Iteration   5: 4,703 ns/op


Result "io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumBigDecimalFromLong":
  4,646 ±(99.9%) 0,028 ns/op [Average]
  (min, avg, max) = (4,601, 4,646, 4,742), stdev = 0,038
  CI (99.9%): [4,618, 4,675] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.1, OpenJDK 64-Bit Server VM, 21.0.1+12-Ubuntu-222.04
# VM invoker: /usr/lib/jvm/java-21-openjdk-amd64/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumBigDecimalFromString

# Run progress: 40,00% complete, ETA 00:02:33
# Fork: 1 of 5
# Warmup Iteration   1: 45,541 ns/op
# Warmup Iteration   2: 37,617 ns/op
# Warmup Iteration   3: 35,404 ns/op
# Warmup Iteration   4: 37,558 ns/op
# Warmup Iteration   5: 35,497 ns/op
Iteration   1: 35,316 ns/op
Iteration   2: 35,816 ns/op
Iteration   3: 34,922 ns/op
Iteration   4: 36,887 ns/op
Iteration   5: 35,518 ns/op

# Run progress: 44,00% complete, ETA 00:02:23
# Fork: 2 of 5
# Warmup Iteration   1: 44,885 ns/op
# Warmup Iteration   2: 36,103 ns/op
# Warmup Iteration   3: 36,854 ns/op
# Warmup Iteration   4: 37,558 ns/op
# Warmup Iteration   5: 36,303 ns/op
Iteration   1: 35,450 ns/op
Iteration   2: 35,695 ns/op
Iteration   3: 35,121 ns/op
Iteration   4: 37,287 ns/op
Iteration   5: 35,164 ns/op

# Run progress: 48,00% complete, ETA 00:02:13
# Fork: 3 of 5
# Warmup Iteration   1: 45,073 ns/op
# Warmup Iteration   2: 38,135 ns/op
# Warmup Iteration   3: 38,032 ns/op
# Warmup Iteration   4: 36,098 ns/op
# Warmup Iteration   5: 35,206 ns/op
Iteration   1: 35,212 ns/op
Iteration   2: 35,099 ns/op
Iteration   3: 36,166 ns/op
Iteration   4: 36,080 ns/op
Iteration   5: 34,878 ns/op

# Run progress: 52,00% complete, ETA 00:02:03
# Fork: 4 of 5
# Warmup Iteration   1: 45,358 ns/op
# Warmup Iteration   2: 37,897 ns/op
# Warmup Iteration   3: 36,705 ns/op
# Warmup Iteration   4: 35,476 ns/op
# Warmup Iteration   5: 35,436 ns/op
Iteration   1: 35,209 ns/op
Iteration   2: 35,233 ns/op
Iteration   3: 37,127 ns/op
Iteration   4: 35,748 ns/op
Iteration   5: 35,973 ns/op

# Run progress: 56,00% complete, ETA 00:01:52
# Fork: 5 of 5
# Warmup Iteration   1: 44,834 ns/op
# Warmup Iteration   2: 37,884 ns/op
# Warmup Iteration   3: 37,517 ns/op
# Warmup Iteration   4: 35,490 ns/op
# Warmup Iteration   5: 35,015 ns/op
Iteration   1: 35,477 ns/op
Iteration   2: 36,035 ns/op
Iteration   3: 37,046 ns/op
Iteration   4: 39,181 ns/op
Iteration   5: 37,834 ns/op


Result "io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumBigDecimalFromString":
  35,979 ±(99.9%) 0,784 ns/op [Average]
  (min, avg, max) = (34,878, 35,979, 39,181), stdev = 1,047
  CI (99.9%): [35,194, 36,763] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.1, OpenJDK 64-Bit Server VM, 21.0.1+12-Ubuntu-222.04
# VM invoker: /usr/lib/jvm/java-21-openjdk-amd64/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumDouble

# Run progress: 60,00% complete, ETA 00:01:42
# Fork: 1 of 5
# Warmup Iteration   1: 0,714 ns/op
# Warmup Iteration   2: 0,715 ns/op
# Warmup Iteration   3: 0,753 ns/op
# Warmup Iteration   4: 0,704 ns/op
# Warmup Iteration   5: 0,694 ns/op
Iteration   1: 0,688 ns/op
Iteration   2: 0,737 ns/op
Iteration   3: 0,742 ns/op
Iteration   4: 0,742 ns/op
Iteration   5: 0,715 ns/op

# Run progress: 64,00% complete, ETA 00:01:32
# Fork: 2 of 5
# Warmup Iteration   1: 0,679 ns/op
# Warmup Iteration   2: 0,671 ns/op
# Warmup Iteration   3: 0,687 ns/op
# Warmup Iteration   4: 0,661 ns/op
# Warmup Iteration   5: 0,663 ns/op
Iteration   1: 0,659 ns/op
Iteration   2: 0,668 ns/op
Iteration   3: 0,689 ns/op
Iteration   4: 0,663 ns/op
Iteration   5: 0,672 ns/op

# Run progress: 68,00% complete, ETA 00:01:22
# Fork: 3 of 5
# Warmup Iteration   1: 0,681 ns/op
# Warmup Iteration   2: 0,693 ns/op
# Warmup Iteration   3: 0,678 ns/op
# Warmup Iteration   4: 0,666 ns/op
# Warmup Iteration   5: 0,666 ns/op
Iteration   1: 0,668 ns/op
Iteration   2: 0,693 ns/op
Iteration   3: 0,687 ns/op
Iteration   4: 0,668 ns/op
Iteration   5: 0,667 ns/op

# Run progress: 72,00% complete, ETA 00:01:11
# Fork: 4 of 5
# Warmup Iteration   1: 0,681 ns/op
# Warmup Iteration   2: 0,727 ns/op
# Warmup Iteration   3: 0,746 ns/op
# Warmup Iteration   4: 0,735 ns/op
# Warmup Iteration   5: 0,737 ns/op
Iteration   1: 0,729 ns/op
Iteration   2: 0,705 ns/op
Iteration   3: 0,743 ns/op
Iteration   4: 0,725 ns/op
Iteration   5: 0,692 ns/op

# Run progress: 76,00% complete, ETA 00:01:01
# Fork: 5 of 5
# Warmup Iteration   1: 0,684 ns/op
# Warmup Iteration   2: 0,706 ns/op
# Warmup Iteration   3: 0,723 ns/op
# Warmup Iteration   4: 0,706 ns/op
# Warmup Iteration   5: 0,720 ns/op
Iteration   1: 0,719 ns/op
Iteration   2: 0,759 ns/op
Iteration   3: 0,712 ns/op
Iteration   4: 0,719 ns/op
Iteration   5: 0,731 ns/op


Result "io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumDouble":
  0,704 ±(99.9%) 0,023 ns/op [Average]
  (min, avg, max) = (0,659, 0,704, 0,759), stdev = 0,030
  CI (99.9%): [0,681, 0,726] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.1, OpenJDK 64-Bit Server VM, 21.0.1+12-Ubuntu-222.04
# VM invoker: /usr/lib/jvm/java-21-openjdk-amd64/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumFloat

# Run progress: 80,00% complete, ETA 00:00:51
# Fork: 1 of 5
# Warmup Iteration   1: 0,675 ns/op
# Warmup Iteration   2: 0,709 ns/op
# Warmup Iteration   3: 0,665 ns/op
# Warmup Iteration   4: 0,663 ns/op
# Warmup Iteration   5: 0,656 ns/op
Iteration   1: 0,665 ns/op
Iteration   2: 0,693 ns/op
Iteration   3: 0,666 ns/op
Iteration   4: 0,724 ns/op
Iteration   5: 1,123 ns/op

# Run progress: 84,00% complete, ETA 00:00:40
# Fork: 2 of 5
# Warmup Iteration   1: 0,976 ns/op
# Warmup Iteration   2: 0,866 ns/op
# Warmup Iteration   3: 0,723 ns/op
# Warmup Iteration   4: 0,696 ns/op
# Warmup Iteration   5: 0,682 ns/op
Iteration   1: 0,705 ns/op
Iteration   2: 0,712 ns/op
Iteration   3: 0,676 ns/op
Iteration   4: 0,685 ns/op
Iteration   5: 0,680 ns/op

# Run progress: 88,00% complete, ETA 00:00:30
# Fork: 3 of 5
# Warmup Iteration   1: 0,716 ns/op
# Warmup Iteration   2: 0,681 ns/op
# Warmup Iteration   3: 0,690 ns/op
# Warmup Iteration   4: 0,678 ns/op
# Warmup Iteration   5: 0,673 ns/op
Iteration   1: 0,726 ns/op
Iteration   2: 0,685 ns/op
Iteration   3: 0,674 ns/op
Iteration   4: 0,668 ns/op
Iteration   5: 0,677 ns/op

# Run progress: 92,00% complete, ETA 00:00:20
# Fork: 4 of 5
# Warmup Iteration   1: 0,714 ns/op
# Warmup Iteration   2: 0,683 ns/op
# Warmup Iteration   3: 0,733 ns/op
# Warmup Iteration   4: 0,768 ns/op
# Warmup Iteration   5: 0,804 ns/op
Iteration   1: 0,800 ns/op
Iteration   2: 0,808 ns/op
Iteration   3: 0,767 ns/op
Iteration   4: 0,679 ns/op
Iteration   5: 0,678 ns/op

# Run progress: 96,00% complete, ETA 00:00:10
# Fork: 5 of 5
# Warmup Iteration   1: 0,748 ns/op
# Warmup Iteration   2: 0,681 ns/op
# Warmup Iteration   3: 0,668 ns/op
# Warmup Iteration   4: 0,690 ns/op
# Warmup Iteration   5: 0,682 ns/op
Iteration   1: 0,735 ns/op
Iteration   2: 0,678 ns/op
Iteration   3: 0,766 ns/op
Iteration   4: 0,689 ns/op
Iteration   5: 0,745 ns/op


Result "io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumFloat":
  0,724 ±(99.9%) 0,070 ns/op [Average]
  (min, avg, max) = (0,665, 0,724, 1,123), stdev = 0,093
  CI (99.9%): [0,655, 0,794] (assumes normal distribution)


# Run complete. Total time: 00:04:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          Mode  Cnt    Score   Error  Units
BigDecimalVsFloatingPoint.sumBigDecimalFromDouble  avgt   25  129,866 ± 3,146  ns/op
BigDecimalVsFloatingPoint.sumBigDecimalFromLong    avgt   25    4,646 ± 0,028  ns/op
BigDecimalVsFloatingPoint.sumBigDecimalFromString  avgt   25   35,979 ± 0,784  ns/op
BigDecimalVsFloatingPoint.sumDouble                avgt   25    0,704 ± 0,023  ns/op
BigDecimalVsFloatingPoint.sumFloat                 avgt   25    0,724 ± 0,070  ns/op
