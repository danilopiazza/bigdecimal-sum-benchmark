# JMH version: 1.37
# VM version: JDK 21.0.1, OpenJDK 64-Bit Server VM, 21.0.1+12-Ubuntu-222.04
# VM invoker: /usr/lib/jvm/java-21-openjdk-amd64/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumBigDecimals

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: 8044153,032 ops/s
# Warmup Iteration   2: 7845949,911 ops/s
# Warmup Iteration   3: 8201321,552 ops/s
# Warmup Iteration   4: 7830444,432 ops/s
# Warmup Iteration   5: 7863635,719 ops/s
Iteration   1: 7474296,953 ops/s
Iteration   2: 7898836,874 ops/s
Iteration   3: 7919216,235 ops/s
Iteration   4: 7738326,012 ops/s
Iteration   5: 7927036,898 ops/s

# Run progress: 6,67% complete, ETA 00:23:23
# Fork: 2 of 5
# Warmup Iteration   1: 7471522,448 ops/s
# Warmup Iteration   2: 7497083,586 ops/s
# Warmup Iteration   3: 7599695,133 ops/s
# Warmup Iteration   4: 7607119,649 ops/s
# Warmup Iteration   5: 7575104,519 ops/s
Iteration   1: 7569876,908 ops/s
Iteration   2: 7604830,861 ops/s
Iteration   3: 7405554,049 ops/s
Iteration   4: 7381185,014 ops/s
Iteration   5: 7595397,888 ops/s

# Run progress: 13,33% complete, ETA 00:21:43
# Fork: 3 of 5
# Warmup Iteration   1: 7734884,672 ops/s
# Warmup Iteration   2: 7745560,066 ops/s
# Warmup Iteration   3: 7862820,787 ops/s
# Warmup Iteration   4: 7818776,020 ops/s
# Warmup Iteration   5: 7809432,295 ops/s
Iteration   1: 7871731,159 ops/s
Iteration   2: 7799511,373 ops/s
Iteration   3: 6907600,064 ops/s
Iteration   4: 7764899,016 ops/s
Iteration   5: 7775910,474 ops/s

# Run progress: 20,00% complete, ETA 00:20:03
# Fork: 4 of 5
# Warmup Iteration   1: 7658723,588 ops/s
# Warmup Iteration   2: 7581692,425 ops/s
# Warmup Iteration   3: 7667606,128 ops/s
# Warmup Iteration   4: 7769451,870 ops/s
# Warmup Iteration   5: 7796192,996 ops/s
Iteration   1: 7782795,501 ops/s
Iteration   2: 7802971,559 ops/s
Iteration   3: 7834345,137 ops/s
Iteration   4: 7625588,319 ops/s
Iteration   5: 7782528,900 ops/s

# Run progress: 26,67% complete, ETA 00:18:22
# Fork: 5 of 5
# Warmup Iteration   1: 6781835,519 ops/s
# Warmup Iteration   2: 6993847,840 ops/s
# Warmup Iteration   3: 7523696,634 ops/s
# Warmup Iteration   4: 7485292,464 ops/s
# Warmup Iteration   5: 7471090,272 ops/s
Iteration   1: 7655027,174 ops/s
Iteration   2: 7667690,347 ops/s
Iteration   3: 7643671,491 ops/s
Iteration   4: 7601651,001 ops/s
Iteration   5: 7579074,609 ops/s


Result "io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumBigDecimals":
  7664382,153 ±(99.9%) 163312,597 ops/s [Average]
  (min, avg, max) = (6907600,064, 7664382,153, 7927036,898), stdev = 218017,645
  CI (99.9%): [7501069,555, 7827694,750] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.1, OpenJDK 64-Bit Server VM, 21.0.1+12-Ubuntu-222.04
# VM invoker: /usr/lib/jvm/java-21-openjdk-amd64/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumDoubles

# Run progress: 33,33% complete, ETA 00:16:42
# Fork: 1 of 5
# Warmup Iteration   1: 2483836360,763 ops/s
# Warmup Iteration   2: 2516414811,428 ops/s
# Warmup Iteration   3: 2471126026,596 ops/s
# Warmup Iteration   4: 2333567965,551 ops/s
# Warmup Iteration   5: 2570555500,153 ops/s
Iteration   1: 2577096960,751 ops/s
Iteration   2: 2492350995,160 ops/s
Iteration   3: 2442269166,284 ops/s
Iteration   4: 2485228389,149 ops/s
Iteration   5: 2528876401,915 ops/s

# Run progress: 40,00% complete, ETA 00:15:02
# Fork: 2 of 5
# Warmup Iteration   1: 2538711825,427 ops/s
# Warmup Iteration   2: 2539360174,590 ops/s
# Warmup Iteration   3: 2533308359,427 ops/s
# Warmup Iteration   4: 2420174276,829 ops/s
# Warmup Iteration   5: 2362266223,739 ops/s
Iteration   1: 2355361039,931 ops/s
Iteration   2: 2563267560,522 ops/s
Iteration   3: 2412487531,907 ops/s
Iteration   4: 2441346292,651 ops/s
Iteration   5: 2512810565,831 ops/s

# Run progress: 46,67% complete, ETA 00:13:21
# Fork: 3 of 5
# Warmup Iteration   1: 2612792188,749 ops/s
# Warmup Iteration   2: 2547406610,708 ops/s
# Warmup Iteration   3: 2473821322,352 ops/s
# Warmup Iteration   4: 2468093131,979 ops/s
# Warmup Iteration   5: 2497194494,156 ops/s
Iteration   1: 2343426439,144 ops/s
Iteration   2: 2543366036,955 ops/s
Iteration   3: 2531593775,476 ops/s
Iteration   4: 2540782070,676 ops/s
Iteration   5: 2534488514,676 ops/s

# Run progress: 53,33% complete, ETA 00:11:41
# Fork: 4 of 5
# Warmup Iteration   1: 2518758887,715 ops/s
# Warmup Iteration   2: 2535230670,363 ops/s
# Warmup Iteration   3: 2506142454,505 ops/s
# Warmup Iteration   4: 2538114632,634 ops/s
# Warmup Iteration   5: 2550057314,323 ops/s
Iteration   1: 2538749016,232 ops/s
Iteration   2: 2527289263,855 ops/s
Iteration   3: 2534116802,730 ops/s
Iteration   4: 2542931575,372 ops/s
Iteration   5: 2531830141,477 ops/s

# Run progress: 60,00% complete, ETA 00:10:01
# Fork: 5 of 5
# Warmup Iteration   1: 2532908031,661 ops/s
# Warmup Iteration   2: 2534267849,340 ops/s
# Warmup Iteration   3: 2433067261,426 ops/s
# Warmup Iteration   4: 2446546349,327 ops/s
# Warmup Iteration   5: 2567651461,443 ops/s
Iteration   1: 2513108987,088 ops/s
Iteration   2: 2430379524,842 ops/s
Iteration   3: 2563921361,879 ops/s
Iteration   4: 2411945783,168 ops/s
Iteration   5: 2429552575,704 ops/s


Result "io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumDoubles":
  2493143070,935 ±(99.9%) 49246941,108 ops/s [Average]
  (min, avg, max) = (2343426439,144, 2493143070,935, 2577096960,751), stdev = 65743257,412
  CI (99.9%): [2443896129,827, 2542390012,043] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.1, OpenJDK 64-Bit Server VM, 21.0.1+12-Ubuntu-222.04
# VM invoker: /usr/lib/jvm/java-21-openjdk-amd64/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumFloats

# Run progress: 66,67% complete, ETA 00:08:21
# Fork: 1 of 5
# Warmup Iteration   1: 2530223846,293 ops/s
# Warmup Iteration   2: 2503356304,290 ops/s
# Warmup Iteration   3: 2541423926,525 ops/s
# Warmup Iteration   4: 2533540157,246 ops/s
# Warmup Iteration   5: 2527142063,882 ops/s
Iteration   1: 2539803186,566 ops/s
Iteration   2: 2540037252,573 ops/s
Iteration   3: 2528917401,207 ops/s
Iteration   4: 2449505292,641 ops/s
Iteration   5: 2514842785,902 ops/s

# Run progress: 73,33% complete, ETA 00:06:40
# Fork: 2 of 5
# Warmup Iteration   1: 2528189896,375 ops/s
# Warmup Iteration   2: 2532869430,199 ops/s
# Warmup Iteration   3: 2529794398,138 ops/s
# Warmup Iteration   4: 2510929692,770 ops/s
# Warmup Iteration   5: 2556508781,536 ops/s
Iteration   1: 2531592017,181 ops/s
Iteration   2: 2258051710,411 ops/s
Iteration   3: 2495196912,850 ops/s
Iteration   4: 2531345122,813 ops/s
Iteration   5: 2506457751,016 ops/s

# Run progress: 80,00% complete, ETA 00:05:00
# Fork: 3 of 5
# Warmup Iteration   1: 2551515189,874 ops/s
# Warmup Iteration   2: 2547678377,186 ops/s
# Warmup Iteration   3: 2537217428,447 ops/s
# Warmup Iteration   4: 2496736384,038 ops/s
# Warmup Iteration   5: 2506696538,159 ops/s
Iteration   1: 2488376287,436 ops/s
Iteration   2: 2520404109,506 ops/s
Iteration   3: 2510760581,790 ops/s
Iteration   4: 2401284741,458 ops/s
Iteration   5: 2527357485,510 ops/s

# Run progress: 86,67% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 2512561532,861 ops/s
# Warmup Iteration   2: 2527864168,140 ops/s
# Warmup Iteration   3: 2486505019,730 ops/s
# Warmup Iteration   4: 2529701209,488 ops/s
# Warmup Iteration   5: 2374720974,793 ops/s
Iteration   1: 2410746334,699 ops/s
Iteration   2: 2531645682,265 ops/s
Iteration   3: 2523387822,055 ops/s
Iteration   4: 2502394056,203 ops/s
Iteration   5: 2532963380,437 ops/s

# Run progress: 93,33% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 2508178561,011 ops/s
# Warmup Iteration   2: 2531665091,836 ops/s
# Warmup Iteration   3: 2520259054,634 ops/s
# Warmup Iteration   4: 2519500490,835 ops/s
# Warmup Iteration   5: 2535078069,174 ops/s
Iteration   1: 2531411119,420 ops/s
Iteration   2: 2519896887,167 ops/s
Iteration   3: 2531865330,518 ops/s
Iteration   4: 2529485295,870 ops/s
Iteration   5: 2525576102,018 ops/s


Result "io.github.danilopiazza.benchmark.bigdecimal.BigDecimalVsFloatingPoint.sumFloats":
  2499332185,980 ±(99.9%) 46643744,285 ops/s [Average]
  (min, avg, max) = (2258051710,411, 2499332185,980, 2540037252,573), stdev = 62268064,131
  CI (99.9%): [2452688441,696, 2545975930,265] (assumes normal distribution)


# Run complete. Total time: 00:25:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  Mode  Cnt           Score          Error  Units
BigDecimalVsFloatingPoint.sumBigDecimals  thrpt   25     7664382,153 ±   163312,597  ops/s
BigDecimalVsFloatingPoint.sumDoubles      thrpt   25  2493143070,935 ± 49246941,108  ops/s
BigDecimalVsFloatingPoint.sumFloats       thrpt   25  2499332185,980 ± 46643744,285  ops/s
